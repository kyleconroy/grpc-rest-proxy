// Code generated by protoc-gen-go.
// source: stripe.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	stripe.proto

It has these top-level messages:
	Resource
	Charge
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Resource struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto1.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}

type Charge struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Livemode bool   `protobuf:"varint,2,opt,name=livemode" json:"livemode,omitempty"`
	Amount   int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *Charge) Reset()         { *m = Charge{} }
func (m *Charge) String() string { return proto1.CompactTextString(m) }
func (*Charge) ProtoMessage()    {}

func init() {
}

// Client API for Stripe service

type StripeClient interface {
	GetCharge(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Charge, error)
}

type stripeClient struct {
	cc *grpc.ClientConn
}

func NewStripeClient(cc *grpc.ClientConn) StripeClient {
	return &stripeClient{cc}
}

func (c *stripeClient) GetCharge(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Charge, error) {
	out := new(Charge)
	err := grpc.Invoke(ctx, "/proto.Stripe/GetCharge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stripe service

type StripeServer interface {
	GetCharge(context.Context, *Resource) (*Charge, error)
}

func RegisterStripeServer(s *grpc.Server, srv StripeServer) {
	s.RegisterService(&_Stripe_serviceDesc, srv)
}

func _Stripe_GetCharge_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(Resource)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(StripeServer).GetCharge(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Stripe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stripe",
	HandlerType: (*StripeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharge",
			Handler:    _Stripe_GetCharge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
